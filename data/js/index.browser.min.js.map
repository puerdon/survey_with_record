{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-audio-response\",\n  parameters: {\n    /** The HTML string to be displayed */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** How long to show the trial. */\n    recording_duration: {\n      type: ParameterType.INT,\n      default: 2000,\n    },\n    /** Whether or not to show a button to end the recording. If false, the recording_duration must be set. */\n    show_done_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** Label for the done (stop recording) button. Only used if show_done_button is true. */\n    done_button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /** Label for the record again button (only used if allow_playback is true). */\n    record_again_button_label: {\n      type: ParameterType.STRING,\n      default: \"Record again\",\n    },\n    /** Label for the button to accept the audio recording (only used if allow_playback is true). */\n    accept_button_label: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n    /** Whether or not to allow the participant to playback the recording and either accept or re-record. */\n    allow_playback: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Whether or not to save the video URL to the trial data. */\n    save_audio_url: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /** Whether or not to show a button to end the recording. If false, the recording_duration must be set. */\n    show_start_button: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** Label for the done (stop recording) button. Only used if show_done_button is true. */\n    start_button_label: {\n      type: ParameterType.STRING,\n      default: \"開始錄音\",\n    },\n    /** 是否要出現自訂的textarea **/\n    show_textarea: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    image_name: {\n      type: ParameterType.STRING,\n      default: true,\n    },\n\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * html-audio-response\n * jsPsych plugin for displaying a stimulus and recording an audio response through a microphone\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-audio-response/ html-audio-response plugin documentation on jspsych.org}\n */\nclass HtmlAudioResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private stimulus_start_time;\n  private recorder_start_time;\n  private recorder: MediaRecorder;\n  private audio_url;\n  private response;\n  private load_resolver;\n  private rt: number = null;\n  private start_event_handler;\n  private stop_event_handler;\n  private data_available_handler;\n  private recorded_data_chunks = [];\n  private textarea;\n  private interval_id;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    this.recorder = this.jsPsych.pluginAPI.getMicrophoneRecorder();\n\n    this.setupRecordingEvents(display_element, trial);\n    \n\n    // 要改成按下按鈕才開始錄音\n    // this.startRecording();\n\n    if (!trial.show_start_button) {\n      console.log('if (!trial.show_start_button)');\n      this.startRecording();\n    }\n\n    this.showDisplay(display_element, trial);\n    this.addButtonEvent(display_element, trial);\n    \n  }\n\n  private showDisplay(display_element, trial) {\n    const ro = new ResizeObserver((entries, observer) => {\n      this.stimulus_start_time = performance.now();\n      observer.unobserve(display_element);\n      //observer.disconnect();\n    });\n\n    ro.observe(display_element);\n\n    // let html = `<div id=\"jspsych-html-audio-response-stimulus\">${trial.stimulus}</div>`;\n    let html = `<div id=\"jspsych-html-audio-response-stimulus\"><p>請以族語描述下圖情境：</p>\n        <img src=\"images/${trial.image_name}\" width=\"90%\"></div>`;\n\n    \n\n    console.log(trial.show_textarea);\n\n    if (trial.show_textarea) {\n      html += `<p>請在下方欄位輸入族語文字（您可以自行選擇是否要輸入）</p><textarea id=\"ab\" name=\"ab\"\n          rows=\"5\" cols=\"33\"></textarea>`\n    }\n\n    if (trial.show_start_button) {\n      html += `<p><button class=\"jspsych-btn\" id=\"start-trial\">${trial.start_button_label}</button></p>`;\n    }\n\n    if (trial.show_done_button) {\n      html += `<p><button class=\"jspsych-btn\" id=\"finish-trial\">${trial.done_button_label}</button></p>`;\n    }\n\n\n\n    display_element.innerHTML = html;\n  }\n\n  private hideStimulus(display_element: HTMLElement) {\n    const el: HTMLElement = display_element.querySelector(\"#jspsych-html-audio-response-stimulus\");\n    if (el) {\n      el.style.visibility = \"hidden\";\n    }\n  }\n\n  private addButtonEvent(display_element, trial) {\n    const btn = display_element.querySelector(\"#finish-trial\");\n    if (btn) {\n      btn.addEventListener(\"click\", () => {\n        const end_time = performance.now();\n        this.rt = Math.round(end_time - this.stimulus_start_time);\n        this.stopRecording().then(() => {\n          // 清除倒數;\n          clearInterval(this.interval_id);\n          if (trial.allow_playback) {\n            this.showPlaybackControls(display_element, trial);\n          } else {\n            this.endTrial(display_element, trial);\n          }\n        });\n      });\n    }\n\n    const btn_start = display_element.querySelector(\"#start-trial\");\n    if (btn_start) {\n      btn_start.addEventListener(\"click\", () => {\n        console.log();\n        console.log('recording_duration: ' + trial.recording_duration.toString());\n        this.startRecording();\n        var total = trial.recording_duration / 1000;\n        btn_start.innerHTML = `正在錄音... ${total}:00`;\n\n        console.log('這裡');\n        this.interval_id = setInterval(() => {\n          console.log(`total: ${total}`);\n          total -= 1;\n          btn_start.innerHTML = `正在錄音... ${total}:00`;\n          if (total <= 0) {\n            console.log('clearInterval();');\n            clearInterval(this.interval_id);\n          }\n        }, 1000);\n        console.log(`interval_id: ${this.interval_id}`);\n      \n      \n      });\n    }\n  }\n\n  private setupRecordingEvents(display_element, trial) {\n    this.data_available_handler = (e) => {\n      if (e.data.size > 0) {\n        this.recorded_data_chunks.push(e.data);\n      }\n    };\n\n    this.stop_event_handler = () => {\n      const data = new Blob(this.recorded_data_chunks, { type: \"audio/webm\" });\n      this.audio_url = URL.createObjectURL(data);\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => {\n        const base64 = (reader.result as string).split(\",\")[1];\n        this.response = base64;\n        this.load_resolver();\n      });\n      reader.readAsDataURL(data);\n\n      if (trial.show_textarea) {\n        let ab = display_element.querySelector(\"#ab\");\n        this.textarea = ab.value;\n      }\n\n    };\n\n    this.start_event_handler = (e) => {\n      console.log('start_event fired');\n\n      // resets the recorded data\n      this.recorded_data_chunks.length = 0;\n\n      this.recorder_start_time = e.timeStamp;\n      \n      if (!trial.show_start_button) {\n        this.showDisplay(display_element, trial);\n        this.addButtonEvent(display_element, trial);\n      }\n\n      const btn_start = display_element.querySelector(\"#start-trial\");\n    \n\n      // var total = trial.recording_duration / 1000;\n\n      // if (btn_start) {\n      //   console.log('這裡');\n      //   this.interval_id = setInterval(() => {\n      //     console.log(`total: ${total}`);\n      //     total -= 1;\n      //     btn_start.innerHTML = `正在錄音... ${total}:00`;\n      //     if (total <= 0) {\n      //       console.log('clearInterval();');\n      //       clearInterval(this.interval_id);\n      //     }\n      //   }, 1000);\n      //   console.log(`interval_id: ${this.interval_id}`);\n      \n      // }\n\n      // this.showDisplay(display_element, trial);\n      // this.addButtonEvent(display_element, trial);\n\n      // setup timer for hiding the stimulus\n      if (trial.stimulus_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          this.hideStimulus(display_element);\n        }, trial.stimulus_duration);\n      }\n\n      // setup timer for ending the trial\n      if (trial.recording_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          // this check is necessary for cases where the\n          // done_button is clicked before the timer expires\n          if (this.recorder.state !== \"inactive\") {\n            this.stopRecording().then(() => {\n              if (trial.allow_playback) {\n                this.showPlaybackControls(display_element, trial);\n              } else {\n                this.endTrial(display_element, trial);\n              }\n            });\n          }\n        }, trial.recording_duration);\n      }\n    };\n\n    this.recorder.addEventListener(\"dataavailable\", this.data_available_handler);\n\n    this.recorder.addEventListener(\"stop\", this.stop_event_handler);\n\n    this.recorder.addEventListener(\"start\", this.start_event_handler);\n  }\n\n  private startRecording() {\n    console.log('recording start!!!!!');\n    this.recorder.start();\n  }\n\n  private stopRecording() {\n    this.recorder.stop();\n    return new Promise((resolve) => {\n      this.load_resolver = resolve;\n    });\n  }\n\n  private showPlaybackControls(display_element, trial) {\n  \n    display_element.innerHTML = `\n      <p><audio id=\"playback\" src=\"${this.audio_url}\" controls></audio></p>\n      <button id=\"record-again\" class=\"jspsych-btn\">${trial.record_again_button_label}</button>\n      <button id=\"continue\" class=\"jspsych-btn\">${trial.accept_button_label}</button>\n    `;\n\n    if (trial.show_textarea) {\n      display_element.innerHTML = `<p>您所輸入的族語：</p><p>${this.textarea}</p>` + display_element.innerHTML;\n    }\n\n    display_element.querySelector(\"#record-again\").addEventListener(\"click\", () => {\n      // release object url to save memory\n      URL.revokeObjectURL(this.audio_url);\n      \n      // this.startRecording();\n      this.showDisplay(display_element, trial);\n      this.addButtonEvent(display_element, trial);\n    });\n    display_element.querySelector(\"#continue\").addEventListener(\"click\", () => {\n      this.endTrial(display_element, trial);\n    });\n\n    // const audio = display_element.querySelector('#playback');\n    // audio.src =\n  }\n\n  private endTrial(display_element, trial) {\n    // clear recordering event handler\n\n    this.recorder.removeEventListener(\"dataavailable\", this.data_available_handler);\n    this.recorder.removeEventListener(\"start\", this.start_event_handler);\n    this.recorder.removeEventListener(\"stop\", this.stop_event_handler);\n\n    // kill any remaining setTimeout handlers\n    this.jsPsych.pluginAPI.clearAllTimeouts();\n\n    // gather the data to store for the trial\n    var trial_data: any = {\n      rt: this.rt,\n      stimulus: trial.stimulus,\n      response: this.response,\n      estimated_stimulus_onset: Math.round(this.stimulus_start_time - this.recorder_start_time),\n      textarea: this.textarea,\n      image_name: trial.image_name\n    };\n\n    if (trial.save_audio_url) {\n      trial_data.audio_url = this.audio_url;\n    } else {\n      URL.revokeObjectURL(this.audio_url);\n    }\n\n    // clear the display\n    display_element.innerHTML = \"\";\n\n    // move on to the next trial\n    this.jsPsych.finishTrial(trial_data);\n  }\n}\n\nexport default HtmlAudioResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","default","undefined","stimulus_duration","INT","recording_duration","show_done_button","BOOL","done_button_label","STRING","record_again_button_label","accept_button_label","allow_playback","save_audio_url","show_start_button","start_button_label","show_textarea","image_name","HtmlAudioResponsePlugin","jsPsych","_classCallCheck","this","rt","recorded_data_chunks","display_element","trial","recorder","pluginAPI","getMicrophoneRecorder","setupRecordingEvents","console","log","startRecording","showDisplay","addButtonEvent","_this","ResizeObserver","entries","observer","stimulus_start_time","performance","now","unobserve","observe","html","concat","innerHTML","value","el","querySelector","style","visibility","_this2","btn","addEventListener","end_time","Math","round","stopRecording","then","clearInterval","interval_id","showPlaybackControls","endTrial","btn_start","toString","total","setInterval","_this3","data_available_handler","e","data","size","push","stop_event_handler","Blob","audio_url","URL","createObjectURL","reader","FileReader","base64","result","split","response","load_resolver","readAsDataURL","ab","textarea","start_event_handler","length","recorder_start_time","timeStamp","setTimeout","hideStimulus","state","start","_this4","stop","Promise","resolve","_this5","revokeObjectURL","removeEventListener","clearAllTimeouts","trial_data","estimated_stimulus_onset","finishTrial"],"mappings":"4NAEA,IAAMA,EAAc,CAClBC,KAAM,sBACNC,WAAY,CAEVC,SAAU,CACRC,KAAMC,EAAaA,cAACC,YACpBC,aAASC,GAGXC,kBAAmB,CACjBL,KAAMC,EAAaA,cAACK,IACpBH,QAAS,MAGXI,mBAAoB,CAClBP,KAAMC,EAAaA,cAACK,IACpBH,QAAS,KAGXK,iBAAkB,CAChBR,KAAMC,EAAaA,cAACQ,KACpBN,SAAS,GAGXO,kBAAmB,CACjBV,KAAMC,EAAaA,cAACU,OACpBR,QAAS,YAGXS,0BAA2B,CACzBZ,KAAMC,EAAaA,cAACU,OACpBR,QAAS,gBAGXU,oBAAqB,CACnBb,KAAMC,EAAaA,cAACU,OACpBR,QAAS,YAGXW,eAAgB,CACdd,KAAMC,EAAaA,cAACQ,KACpBN,SAAS,GAGXY,eAAgB,CACdf,KAAMC,EAAaA,cAACQ,KACpBN,SAAS,GAGXa,kBAAmB,CACjBhB,KAAMC,EAAaA,cAACQ,KACpBN,SAAS,GAGXc,mBAAoB,CAClBjB,KAAMC,EAAaA,cAACU,OACpBR,QAAS,QAGXe,cAAe,CACblB,KAAMC,EAAaA,cAACQ,KACpBN,SAAS,GAEXgB,WAAY,CACVnB,KAAMC,EAAaA,cAACU,OACpBR,SAAS,KAcTiB,aAgBJ,SAAAA,EAAoBC,gGAAgBC,CAAAC,KAAAH,GAAhBG,KAAOF,QAAPA,EARZE,KAAEC,GAAW,KAIbD,KAAoBE,qBAAG,EAIS,6CAExC,SAAMC,EAA8BC,GAClCJ,KAAKK,SAAWL,KAAKF,QAAQQ,UAAUC,wBAEvCP,KAAKQ,qBAAqBL,EAAiBC,GAMtCA,EAAMX,oBACTgB,QAAQC,IAAI,iCACZV,KAAKW,kBAGPX,KAAKY,YAAYT,EAAiBC,GAClCJ,KAAKa,eAAeV,EAAiBC,EAEtC,4BAEO,SAAYD,EAAiBC,GAAK,IAAAU,EAAAd,KAC7B,IAAIe,gBAAe,SAACC,EAASC,GACtCH,EAAKI,oBAAsBC,YAAYC,MACvCH,EAASI,UAAUlB,EAEpB,IAEEmB,QAAQnB,GAGX,IAAIoB,EAAI,+FAAAC,OACepB,EAAMR,WAD7B,wBAKAa,QAAQC,IAAIN,EAAMT,eAEdS,EAAMT,gBACR4B,GAAA,0GAIEnB,EAAMX,oBACR8B,GAA2DnB,mDAAAA,OAAAA,EAAMV,mBAAjE,kBAGEU,EAAMnB,mBACRsC,GAA4DnB,oDAAAA,OAAAA,EAAMjB,kBAAlE,kBAKFgB,EAAgBsB,UAAYF,CAC7B,uBAEOG,MAAA,SAAavB,GACnB,IAAMwB,EAAkBxB,EAAgByB,cAAc,yCAClDD,IACFA,EAAGE,MAAMC,WAAa,SAEzB,+BAEO,SAAe3B,EAAiBC,GAAK,IAAA2B,EAAA/B,KACrCgC,EAAM7B,EAAgByB,cAAc,iBACtCI,GACFA,EAAIC,iBAAiB,SAAS,WAC5B,IAAMC,EAAWf,YAAYC,MAC7BW,EAAK9B,GAAKkC,KAAKC,MAAMF,EAAWH,EAAKb,qBACrCa,EAAKM,gBAAgBC,MAAK,WAExBC,cAAcR,EAAKS,aACfpC,EAAMb,eACRwC,EAAKU,qBAAqBtC,EAAiBC,GAE3C2B,EAAKW,SAASvC,EAAiBC,SAMvC,IAAMuC,EAAYxC,EAAgByB,cAAc,gBAC5Ce,GACFA,EAAUV,iBAAiB,SAAS,WAClCxB,QAAQC,MACRD,QAAQC,IAAI,uBAAyBN,EAAMpB,mBAAmB4D,YAC9Db,EAAKpB,iBACL,IAAIkC,EAAQzC,EAAMpB,mBAAqB,IACvC2D,EAAUlB,UAAV,WAAAD,OAAiCqB,EAAjC,OAEApC,QAAQC,IAAI,MACZqB,EAAKS,YAAcM,aAAY,WAC7BrC,QAAQC,IAAR,UAAAc,OAAsBqB,IACtBA,GAAS,EACTF,EAAUlB,UAAV,WAAAD,OAAiCqB,EAAjC,OACIA,GAAS,IACXpC,QAAQC,IAAI,oBACZ6B,cAAcR,EAAKS,aANO,GAQ3B,KACH/B,QAAQC,IAAoB,gBAAAc,OAAAO,EAAKS,gBAKtC,qCAEO,SAAqBrC,EAAiBC,GAAK,IAAA2C,EAAA/C,KACjDA,KAAKgD,uBAAyB,SAACC,GACzBA,EAAEC,KAAKC,KAAO,GAChBJ,EAAK7C,qBAAqBkD,KAAKH,EAAEC,OAIrClD,KAAKqD,mBAAqB,WACxB,IAAMH,EAAO,IAAII,KAAKP,EAAK7C,qBAAsB,CAAEzB,KAAM,eACzDsE,EAAKQ,UAAYC,IAAIC,gBAAgBP,GACrC,IAAMQ,EAAS,IAAIC,WAQnB,GAPAD,EAAOzB,iBAAiB,QAAQ,WAC9B,IAAM2B,EAAUF,EAAOG,OAAkBC,MAAM,KAAK,GACpDf,EAAKgB,SAAWH,EAChBb,EAAKiB,mBAEPN,EAAOO,cAAcf,GAEjB9C,EAAMT,cAAe,CACvB,IAAIuE,EAAK/D,EAAgByB,cAAc,OACvCmB,EAAKoB,SAAWD,EAAGxC,KACpB,GAIH1B,KAAKoE,oBAAsB,SAACnB,GAC1BxC,QAAQC,IAAI,qBAGZqC,EAAK7C,qBAAqBmE,OAAS,EAEnCtB,EAAKuB,oBAAsBrB,EAAEsB,UAExBnE,EAAMX,oBACTsD,EAAKnC,YAAYT,EAAiBC,GAClC2C,EAAKlC,eAAeV,EAAiBC,IAGrBD,EAAgByB,cAAc,gBAwBhB,OAA5BxB,EAAMtB,mBACRiE,EAAKjD,QAAQQ,UAAUkE,YAAW,WAChCzB,EAAK0B,aAAatE,KACjBC,EAAMtB,mBAIsB,OAA7BsB,EAAMpB,oBACR+D,EAAKjD,QAAQQ,UAAUkE,YAAW,WAGJ,aAAxBzB,EAAK1C,SAASqE,OAChB3B,EAAKV,gBAAgBC,MAAK,WACpBlC,EAAMb,eACRwD,EAAKN,qBAAqBtC,EAAiBC,GAE3C2C,EAAKL,SAASvC,EAAiBC,QAIpCA,EAAMpB,qBAIbgB,KAAKK,SAAS4B,iBAAiB,gBAAiBjC,KAAKgD,wBAErDhD,KAAKK,SAAS4B,iBAAiB,OAAQjC,KAAKqD,oBAE5CrD,KAAKK,SAAS4B,iBAAiB,QAASjC,KAAKoE,oBAC9C,+BAEO,WACN3D,QAAQC,IAAI,wBACZV,KAAKK,SAASsE,OACf,8BAEO,WAAa,IAAAC,EAAA5E,KAEnB,OADAA,KAAKK,SAASwE,OACP,IAAIC,SAAQ,SAACC,GAClBH,EAAKZ,cAAgBe,CACtB,GACF,qCAEO,SAAqB5E,EAAiBC,GAAK,IAAA4E,EAAAhF,KAEjDG,EAAgBsB,UACiB,wCAAAD,OAAAxB,KAAKuD,UADtC,iFAAA/B,OAEkDpB,EAAMf,0BAFxD,+DAAAmC,OAG8CpB,EAAMd,oBAHpD,mBAMIc,EAAMT,gBACRQ,EAAgBsB,UAAY,qBAAAD,OAAqBxB,KAAKmE,SAA1B,QAA2ChE,EAAgBsB,WAGzFtB,EAAgByB,cAAc,iBAAiBK,iBAAiB,SAAS,WAEvEuB,IAAIyB,gBAAgBD,EAAKzB,WAGzByB,EAAKpE,YAAYT,EAAiBC,GAClC4E,EAAKnE,eAAeV,EAAiBC,MAEvCD,EAAgByB,cAAc,aAAaK,iBAAiB,SAAS,WACnE+C,EAAKtC,SAASvC,EAAiBC,EAChC,GAIF,yBAEO,SAASD,EAAiBC,GAGhCJ,KAAKK,SAAS6E,oBAAoB,gBAAiBlF,KAAKgD,wBACxDhD,KAAKK,SAAS6E,oBAAoB,QAASlF,KAAKoE,qBAChDpE,KAAKK,SAAS6E,oBAAoB,OAAQlF,KAAKqD,oBAG/CrD,KAAKF,QAAQQ,UAAU6E,mBAGvB,IAAIC,EAAkB,CACpBnF,GAAID,KAAKC,GACTzB,SAAU4B,EAAM5B,SAChBuF,SAAU/D,KAAK+D,SACfsB,yBAA0BlD,KAAKC,MAAMpC,KAAKkB,oBAAsBlB,KAAKsE,qBACrEH,SAAUnE,KAAKmE,SACfvE,WAAYQ,EAAMR,YAGhBQ,EAAMZ,eACR4F,EAAW7B,UAAYvD,KAAKuD,UAE5BC,IAAIyB,gBAAgBjF,KAAKuD,WAI3BpD,EAAgBsB,UAAY,GAG5BzB,KAAKF,QAAQwF,YAAYF,EAC1B,gGA9RMvF,EAAIxB,KAAGA"}